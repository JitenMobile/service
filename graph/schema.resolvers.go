package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"log"

	"github.com/jiten-mobile/service/graph/model"
)

// Word is the resolver for the word field.
func (r *queryResolver) Word(ctx context.Context, word string) (*model.Word, error) {
	data, err := r.ResolveWordQuery(ctx, word)
	if err != nil {
		log.Printf("Error: Failed to resolve word query - [word]:  %v", err)
		return nil, err
	}
	return data, nil
}

// Translation is the resolver for the translation field.
func (r *queryResolver) Translation(ctx context.Context, word string, targetLang string) (*model.Translation, error) {
	data, err := r.ResolveTranslationQuery(ctx, word, targetLang)
	if err != nil {
		log.Printf("Error: Failed to resolve translation query - [word]:  %v", err)
		return nil, err
	}
	return data, nil
}

// WordWithTranslation is the resolver for the wordWithTranslation field.
func (r *queryResolver) WordWithTranslation(ctx context.Context, word string, targetLang string) (*model.WordWithTranslation, error) {
	data, err := r.ResolveWordWithTranslationQuery(ctx, word, targetLang)
	if err != nil {
		log.Printf("Error: Failed to resolve translation query - [word]:  %v", err)
		return nil, err
	}
	return data, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
